//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from WeaveParser.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class WeaveParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, BLOCK_COMMENT=2, ON=3, IN=4, WITH=5, DO=6, TEMP=7, PRINT=8, 
		IF=9, THEN=10, ELSE=11, END=12, IMPORT=13, EXPORT=14, EVENT=15, BEING=16, 
		WHILE=17, FOR=18, EXIT=19, NEXT=20, MEMORY=21, SAVE=22, LOAD=23, AS=24, 
		FUNCTION=25, RETURN=26, OF=27, ASSIGN=28, PLUS=29, MINUS=30, MULTIPLY=31, 
		MOD=32, IS_NOT=33, IS=34, GREATER=35, LESS=36, GREATER_EQUAL=37, LESS_EQUAL=38, 
		AND=39, OR=40, NOT=41, SLASH=42, COMMA=43, LPAREN=44, RPAREN=45, LBRACKET=46, 
		RBRACKET=47, DOT=48, NIL=49, BOOL=50, INT=51, FLOAT=52, STRING=53, NAME=54, 
		WS=55;
	public const int
		RULE_start = 0, RULE_topLevel = 1, RULE_importStatement = 2, RULE_exportStatement = 3, 
		RULE_event = 4, RULE_listener = 5, RULE_memory = 6, RULE_function = 7, 
		RULE_block = 8, RULE_labeled_type = 9, RULE_statement = 10, RULE_print = 11, 
		RULE_temp = 12, RULE_assignment = 13, RULE_save = 14, RULE_load = 15, 
		RULE_while = 16, RULE_for = 17, RULE_exit = 18, RULE_return = 19, RULE_expression = 20, 
		RULE_if = 21, RULE_property_access = 22, RULE_function_call = 23, RULE_identifier = 24, 
		RULE_import_identifier = 25, RULE_literal = 26, RULE_list = 27;
	public static readonly string[] ruleNames = {
		"start", "topLevel", "importStatement", "exportStatement", "event", "listener", 
		"memory", "function", "block", "labeled_type", "statement", "print", "temp", 
		"assignment", "save", "load", "while", "for", "exit", "return", "expression", 
		"if", "property_access", "function_call", "identifier", "import_identifier", 
		"literal", "list"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "'on'", "'in'", "'with'", "'do'", "'temp'", "'print'", 
		"'if'", "'then'", "'else'", "'end'", "'import'", "'export'", "'event'", 
		"'being'", "'while'", "'for'", "'exit'", "'next'", "'memory'", "'save'", 
		"'load'", "'as'", "'function'", "'return'", "'of'", "'='", "'+'", "'-'", 
		"'*'", "'mod'", "'is not'", "'is'", "'>'", "'<'", "'>='", "'<='", "'and'", 
		"'or'", "'not'", "'/'", "','", "'('", "')'", "'['", "']'", "'.'", "'nil'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "BLOCK_COMMENT", "ON", "IN", "WITH", "DO", "TEMP", "PRINT", 
		"IF", "THEN", "ELSE", "END", "IMPORT", "EXPORT", "EVENT", "BEING", "WHILE", 
		"FOR", "EXIT", "NEXT", "MEMORY", "SAVE", "LOAD", "AS", "FUNCTION", "RETURN", 
		"OF", "ASSIGN", "PLUS", "MINUS", "MULTIPLY", "MOD", "IS_NOT", "IS", "GREATER", 
		"LESS", "GREATER_EQUAL", "LESS_EQUAL", "AND", "OR", "NOT", "SLASH", "COMMA", 
		"LPAREN", "RPAREN", "LBRACKET", "RBRACKET", "DOT", "NIL", "BOOL", "INT", 
		"FLOAT", "STRING", "NAME", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "WeaveParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static WeaveParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public WeaveParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public WeaveParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(WeaveParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelContext[] topLevel() {
			return GetRuleContexts<TopLevelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TopLevelContext topLevel(int i) {
			return GetRuleContext<TopLevelContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 18014398545190920L) != 0)) {
				{
				{
				State = 56;
				topLevel();
				}
				}
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 62;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TopLevelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExportStatementContext exportStatement() {
			return GetRuleContext<ExportStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext importStatement() {
			return GetRuleContext<ImportStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EventContext @event() {
			return GetRuleContext<EventContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ListenerContext listener() {
			return GetRuleContext<ListenerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemoryContext memory() {
			return GetRuleContext<MemoryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public TopLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_topLevel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.EnterTopLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.ExitTopLevel(this);
		}
	}

	[RuleVersion(0)]
	public TopLevelContext topLevel() {
		TopLevelContext _localctx = new TopLevelContext(Context, State);
		EnterRule(_localctx, 2, RULE_topLevel);
		try {
			State = 70;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case EXPORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 64;
				exportStatement();
				}
				break;
			case IMPORT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 65;
				importStatement();
				}
				break;
			case EVENT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 66;
				@event();
				}
				break;
			case ON:
				EnterOuterAlt(_localctx, 4);
				{
				State = 67;
				listener();
				}
				break;
			case MEMORY:
				EnterOuterAlt(_localctx, 5);
				{
				State = 68;
				memory();
				}
				break;
			case FUNCTION:
			case NAME:
				EnterOuterAlt(_localctx, 6);
				{
				State = 69;
				function();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(WeaveParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(WeaveParser.MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Import_identifierContext[] import_identifier() {
			return GetRuleContexts<Import_identifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_identifierContext import_identifier(int i) {
			return GetRuleContext<Import_identifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SLASH() { return GetTokens(WeaveParser.SLASH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH(int i) {
			return GetToken(WeaveParser.SLASH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(WeaveParser.AS, 0); }
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_importStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			Match(IMPORT);
			State = 78;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 73;
					import_identifier();
					State = 74;
					Match(SLASH);
					}
					} 
				}
				State = 80;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 83;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				{
				State = 81;
				identifier();
				}
				break;
			case MULTIPLY:
				{
				State = 82;
				Match(MULTIPLY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 85;
				Match(AS);
				State = 86;
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT() { return GetToken(WeaveParser.EXPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exportStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.EnterExportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.ExitExportStatement(this);
		}
	}

	[RuleVersion(0)]
	public ExportStatementContext exportStatement() {
		ExportStatementContext _localctx = new ExportStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_exportStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			Match(EXPORT);
			State = 90;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT() { return GetToken(WeaveParser.EVENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(WeaveParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Labeled_typeContext[] labeled_type() {
			return GetRuleContexts<Labeled_typeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Labeled_typeContext labeled_type(int i) {
			return GetRuleContext<Labeled_typeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(WeaveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(WeaveParser.COMMA, i);
		}
		public EventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.EnterEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.ExitEvent(this);
		}
	}

	[RuleVersion(0)]
	public EventContext @event() {
		EventContext _localctx = new EventContext(Context, State);
		EnterRule(_localctx, 8, RULE_event);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 92;
			Match(EVENT);
			State = 93;
			identifier();
			State = 104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 94;
				Match(WITH);
				State = 100;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 95;
						labeled_type();
						State = 96;
						Match(COMMA);
						}
						} 
					}
					State = 102;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
				}
				State = 103;
				labeled_type();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListenerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON() { return GetToken(WeaveParser.ON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(WeaveParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(WeaveParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(WeaveParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(WeaveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(WeaveParser.COMMA, i);
		}
		public ListenerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_listener; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.EnterListener(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.ExitListener(this);
		}
	}

	[RuleVersion(0)]
	public ListenerContext listener() {
		ListenerContext _localctx = new ListenerContext(Context, State);
		EnterRule(_localctx, 10, RULE_listener);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			Match(ON);
			State = 107;
			identifier();
			State = 118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 108;
				Match(WITH);
				State = 114;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 109;
						identifier();
						State = 110;
						Match(COMMA);
						}
						} 
					}
					State = 116;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
				}
				State = 117;
				identifier();
				}
			}

			State = 120;
			Match(DO);
			State = 121;
			block();
			State = 122;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemoryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY() { return GetToken(WeaveParser.MEMORY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEING() { return GetToken(WeaveParser.BEING, 0); }
		public MemoryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memory; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.EnterMemory(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.ExitMemory(this);
		}
	}

	[RuleVersion(0)]
	public MemoryContext memory() {
		MemoryContext _localctx = new MemoryContext(Context, State);
		EnterRule(_localctx, 12, RULE_memory);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			Match(MEMORY);
			State = 125;
			identifier();
			State = 126;
			Match(BEING);
			State = 127;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION() { return GetToken(WeaveParser.FUNCTION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(WeaveParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(WeaveParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH() { return GetToken(WeaveParser.WITH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Labeled_typeContext[] labeled_type() {
			return GetRuleContexts<Labeled_typeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Labeled_typeContext labeled_type(int i) {
			return GetRuleContext<Labeled_typeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(WeaveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(WeaveParser.COMMA, i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.EnterFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.ExitFunction(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 14, RULE_function);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 130;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 129;
				identifier();
				}
			}

			State = 132;
			Match(FUNCTION);
			State = 133;
			identifier();
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH) {
				{
				State = 134;
				Match(WITH);
				State = 140;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 135;
						labeled_type();
						State = 136;
						Match(COMMA);
						}
						} 
					}
					State = 142;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
				}
				State = 143;
				labeled_type();
				}
			}

			State = 146;
			Match(DO);
			State = 147;
			block();
			State = 148;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 16, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 35556008173372288L) != 0)) {
				{
				{
				State = 150;
				statement();
				}
				}
				State = 155;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Labeled_typeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEING() { return GetToken(WeaveParser.BEING, 0); }
		public Labeled_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeled_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.EnterLabeled_type(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.ExitLabeled_type(this);
		}
	}

	[RuleVersion(0)]
	public Labeled_typeContext labeled_type() {
		Labeled_typeContext _localctx = new Labeled_typeContext(Context, State);
		EnterRule(_localctx, 18, RULE_labeled_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			identifier();
			State = 157;
			Match(BEING);
			State = 158;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintContext print() {
			return GetRuleContext<PrintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TempContext temp() {
			return GetRuleContext<TempContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SaveContext save() {
			return GetRuleContext<SaveContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadContext load() {
			return GetRuleContext<LoadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileContext @while() {
			return GetRuleContext<WhileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForContext @for() {
			return GetRuleContext<ForContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExitContext exit() {
			return GetRuleContext<ExitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 20, RULE_statement);
		try {
			State = 171;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 160;
				@if();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 161;
				print();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 162;
				temp();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 163;
				assignment();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 164;
				save();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 165;
				load();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 166;
				expression(0);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 167;
				@while();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 168;
				@for();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 169;
				exit();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 170;
				@return();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(WeaveParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_print; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.EnterPrint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.ExitPrint(this);
		}
	}

	[RuleVersion(0)]
	public PrintContext print() {
		PrintContext _localctx = new PrintContext(Context, State);
		EnterRule(_localctx, 22, RULE_print);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			Match(PRINT);
			State = 174;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TempContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMP() { return GetToken(WeaveParser.TEMP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(WeaveParser.ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TempContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_temp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.EnterTemp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.ExitTemp(this);
		}
	}

	[RuleVersion(0)]
	public TempContext temp() {
		TempContext _localctx = new TempContext(Context, State);
		EnterRule(_localctx, 24, RULE_temp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			Match(TEMP);
			State = 177;
			identifier();
			State = 178;
			Match(ASSIGN);
			State = 179;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN() { return GetToken(WeaveParser.ASSIGN, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 26, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			expression(0);
			State = 182;
			Match(ASSIGN);
			State = 183;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SaveContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVE() { return GetToken(WeaveParser.SAVE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(WeaveParser.AS, 0); }
		public SaveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_save; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.EnterSave(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.ExitSave(this);
		}
	}

	[RuleVersion(0)]
	public SaveContext save() {
		SaveContext _localctx = new SaveContext(Context, State);
		EnterRule(_localctx, 28, RULE_save);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185;
			Match(SAVE);
			State = 188;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 186;
				identifier();
				}
				break;
			case 2:
				{
				State = 187;
				expression(0);
				}
				break;
			}
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 190;
				Match(AS);
				State = 191;
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD() { return GetToken(WeaveParser.LOAD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS() { return GetToken(WeaveParser.AS, 0); }
		public LoadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_load; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.EnterLoad(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.ExitLoad(this);
		}
	}

	[RuleVersion(0)]
	public LoadContext load() {
		LoadContext _localctx = new LoadContext(Context, State);
		EnterRule(_localctx, 30, RULE_load);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			Match(LOAD);
			State = 195;
			identifier();
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 196;
				Match(AS);
				State = 197;
				identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(WeaveParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(WeaveParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(WeaveParser.END, 0); }
		public WhileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.EnterWhile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.ExitWhile(this);
		}
	}

	[RuleVersion(0)]
	public WhileContext @while() {
		WhileContext _localctx = new WhileContext(Context, State);
		EnterRule(_localctx, 32, RULE_while);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			Match(WHILE);
			State = 201;
			expression(0);
			State = 202;
			Match(DO);
			State = 203;
			block();
			State = 204;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(WeaveParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(WeaveParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO() { return GetToken(WeaveParser.DO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(WeaveParser.END, 0); }
		public ForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.EnterFor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.ExitFor(this);
		}
	}

	[RuleVersion(0)]
	public ForContext @for() {
		ForContext _localctx = new ForContext(Context, State);
		EnterRule(_localctx, 34, RULE_for);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			Match(FOR);
			State = 207;
			identifier();
			State = 208;
			Match(IN);
			State = 209;
			expression(0);
			State = 210;
			Match(DO);
			State = 211;
			block();
			State = 212;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXIT() { return GetToken(WeaveParser.EXIT, 0); }
		public ExitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.EnterExit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.ExitExit(this);
		}
	}

	[RuleVersion(0)]
	public ExitContext exit() {
		ExitContext _localctx = new ExitContext(Context, State);
		EnterRule(_localctx, 36, RULE_exit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			Match(EXIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(WeaveParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.EnterReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.ExitReturn(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 38, RULE_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			Match(RETURN);
			State = 218;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 217;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfContext @if() {
			return GetRuleContext<IfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Property_accessContext property_access() {
			return GetRuleContext<Property_accessContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_callContext function_call() {
			return GetRuleContext<Function_callContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(WeaveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(WeaveParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT() { return GetToken(WeaveParser.NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(WeaveParser.MINUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY() { return GetToken(WeaveParser.MULTIPLY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLASH() { return GetToken(WeaveParser.SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(WeaveParser.MOD, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(WeaveParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS() { return GetToken(WeaveParser.IS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_NOT() { return GetToken(WeaveParser.IS_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS() { return GetToken(WeaveParser.LESS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_EQUAL() { return GetToken(WeaveParser.LESS_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER() { return GetToken(WeaveParser.GREATER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_EQUAL() { return GetToken(WeaveParser.GREATER_EQUAL, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 221;
				@if();
				}
				break;
			case 2:
				{
				State = 222;
				property_access();
				}
				break;
			case 3:
				{
				State = 223;
				function_call();
				}
				break;
			case 4:
				{
				State = 224;
				literal();
				}
				break;
			case 5:
				{
				State = 225;
				identifier();
				}
				break;
			case 6:
				{
				State = 226;
				Match(LPAREN);
				State = 227;
				expression(0);
				State = 228;
				Match(RPAREN);
				}
				break;
			case 7:
				{
				State = 230;
				_la = TokenStream.LA(1);
				if ( !(_la==MINUS || _la==NOT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 231;
				expression(4);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 245;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 243;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 234;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 235;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4404488962048L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 236;
						expression(4);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 237;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 238;
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 239;
						expression(3);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 240;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 241;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 541165879296L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 242;
						expression(2);
						}
						break;
					}
					} 
				}
				State = 247;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IfContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF() { return GetTokens(WeaveParser.IF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF(int i) {
			return GetToken(WeaveParser.IF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] THEN() { return GetTokens(WeaveParser.THEN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN(int i) {
			return GetToken(WeaveParser.THEN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END() { return GetToken(WeaveParser.END, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ELSE() { return GetTokens(WeaveParser.ELSE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE(int i) {
			return GetToken(WeaveParser.ELSE, i);
		}
		public IfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.EnterIf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.ExitIf(this);
		}
	}

	[RuleVersion(0)]
	public IfContext @if() {
		IfContext _localctx = new IfContext(Context, State);
		EnterRule(_localctx, 42, RULE_if);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			Match(IF);
			State = 249;
			expression(0);
			State = 250;
			Match(THEN);
			State = 251;
			block();
			State = 260;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 252;
					Match(ELSE);
					State = 253;
					Match(IF);
					State = 254;
					expression(0);
					State = 255;
					Match(THEN);
					State = 256;
					block();
					}
					} 
				}
				State = 262;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			State = 267;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ELSE) {
				{
				{
				State = 263;
				Match(ELSE);
				State = 264;
				block();
				}
				}
				State = 269;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 270;
			Match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_accessContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF() { return GetToken(WeaveParser.OF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Property_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_access; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.EnterProperty_access(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.ExitProperty_access(this);
		}
	}

	[RuleVersion(0)]
	public Property_accessContext property_access() {
		Property_accessContext _localctx = new Property_accessContext(Context, State);
		EnterRule(_localctx, 44, RULE_property_access);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			identifier();
			State = 273;
			Match(OF);
			State = 274;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_callContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LPAREN() { return GetToken(WeaveParser.LPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RPAREN() { return GetToken(WeaveParser.RPAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(WeaveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(WeaveParser.COMMA, i);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.EnterFunction_call(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.ExitFunction_call(this);
		}
	}

	[RuleVersion(0)]
	public Function_callContext function_call() {
		Function_callContext _localctx = new Function_callContext(Context, State);
		EnterRule(_localctx, 46, RULE_function_call);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			identifier();
			State = 277;
			Match(LPAREN);
			State = 287;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 35556008092762624L) != 0)) {
				{
				State = 283;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 278;
						expression(0);
						State = 279;
						Match(COMMA);
						}
						} 
					}
					State = 285;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
				}
				State = 286;
				expression(0);
				}
			}

			State = 289;
			Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(WeaveParser.NAME, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 48, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT() { return GetTokens(WeaveParser.DOT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT(int i) {
			return GetToken(WeaveParser.DOT, i);
		}
		public Import_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.EnterImport_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.ExitImport_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Import_identifierContext import_identifier() {
		Import_identifierContext _localctx = new Import_identifierContext(Context, State);
		EnterRule(_localctx, 50, RULE_import_identifier);
		try {
			State = 296;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 293;
				identifier();
				}
				break;
			case DOT:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 294;
				Match(DOT);
				State = 295;
				Match(DOT);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NIL() { return GetToken(WeaveParser.NIL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(WeaveParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(WeaveParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(WeaveParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(WeaveParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 52, RULE_literal);
		try {
			State = 304;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NIL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 298;
				Match(NIL);
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 299;
				Match(INT);
				}
				break;
			case FLOAT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 300;
				Match(FLOAT);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 301;
				Match(STRING);
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 302;
				Match(BOOL);
				}
				break;
			case LBRACKET:
				EnterOuterAlt(_localctx, 6);
				{
				State = 303;
				list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(WeaveParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(WeaveParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(WeaveParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(WeaveParser.COMMA, i);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IWeaveParserListener typedListener = listener as IWeaveParserListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(Context, State);
		EnterRule(_localctx, 54, RULE_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 306;
			Match(LBRACKET);
			State = 317;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				{
				State = 312;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
				while ( _alt!=1 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1+1 ) {
						{
						{
						State = 307;
						expression(0);
						State = 308;
						Match(COMMA);
						}
						} 
					}
					State = 314;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
				}
				State = 315;
				expression(0);
				}
				}
				break;
			case 2:
				{
				State = 316;
				identifier();
				}
				break;
			}
			State = 319;
			Match(RBRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 20: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 3);
		case 1: return Precpred(Context, 2);
		case 2: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,55,322,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,1,0,5,0,58,
		8,0,10,0,12,0,61,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,3,1,71,8,1,1,2,1,
		2,1,2,1,2,5,2,77,8,2,10,2,12,2,80,9,2,1,2,1,2,3,2,84,8,2,1,2,1,2,3,2,88,
		8,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,5,4,99,8,4,10,4,12,4,102,9,4,1,
		4,3,4,105,8,4,1,5,1,5,1,5,1,5,1,5,1,5,5,5,113,8,5,10,5,12,5,116,9,5,1,
		5,3,5,119,8,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,3,7,131,8,7,1,7,
		1,7,1,7,1,7,1,7,1,7,5,7,139,8,7,10,7,12,7,142,9,7,1,7,3,7,145,8,7,1,7,
		1,7,1,7,1,7,1,8,5,8,152,8,8,10,8,12,8,155,9,8,1,9,1,9,1,9,1,9,1,10,1,10,
		1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,172,8,10,1,11,1,11,1,
		11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,3,14,189,
		8,14,1,14,1,14,3,14,193,8,14,1,15,1,15,1,15,1,15,3,15,199,8,15,1,16,1,
		16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,
		18,1,19,1,19,3,19,219,8,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
		1,20,1,20,1,20,3,20,233,8,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
		20,5,20,244,8,20,10,20,12,20,247,9,20,1,21,1,21,1,21,1,21,1,21,1,21,1,
		21,1,21,1,21,1,21,5,21,259,8,21,10,21,12,21,262,9,21,1,21,1,21,5,21,266,
		8,21,10,21,12,21,269,9,21,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,23,
		1,23,1,23,5,23,282,8,23,10,23,12,23,285,9,23,1,23,3,23,288,8,23,1,23,1,
		23,1,24,1,24,1,25,1,25,1,25,3,25,297,8,25,1,26,1,26,1,26,1,26,1,26,1,26,
		3,26,305,8,26,1,27,1,27,1,27,1,27,5,27,311,8,27,10,27,12,27,314,9,27,1,
		27,1,27,3,27,318,8,27,1,27,1,27,1,27,5,100,114,140,283,312,1,40,28,0,2,
		4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,
		54,0,4,2,0,30,30,41,41,2,0,31,32,42,42,1,0,29,30,1,0,33,38,345,0,59,1,
		0,0,0,2,70,1,0,0,0,4,72,1,0,0,0,6,89,1,0,0,0,8,92,1,0,0,0,10,106,1,0,0,
		0,12,124,1,0,0,0,14,130,1,0,0,0,16,153,1,0,0,0,18,156,1,0,0,0,20,171,1,
		0,0,0,22,173,1,0,0,0,24,176,1,0,0,0,26,181,1,0,0,0,28,185,1,0,0,0,30,194,
		1,0,0,0,32,200,1,0,0,0,34,206,1,0,0,0,36,214,1,0,0,0,38,216,1,0,0,0,40,
		232,1,0,0,0,42,248,1,0,0,0,44,272,1,0,0,0,46,276,1,0,0,0,48,291,1,0,0,
		0,50,296,1,0,0,0,52,304,1,0,0,0,54,306,1,0,0,0,56,58,3,2,1,0,57,56,1,0,
		0,0,58,61,1,0,0,0,59,57,1,0,0,0,59,60,1,0,0,0,60,62,1,0,0,0,61,59,1,0,
		0,0,62,63,5,0,0,1,63,1,1,0,0,0,64,71,3,6,3,0,65,71,3,4,2,0,66,71,3,8,4,
		0,67,71,3,10,5,0,68,71,3,12,6,0,69,71,3,14,7,0,70,64,1,0,0,0,70,65,1,0,
		0,0,70,66,1,0,0,0,70,67,1,0,0,0,70,68,1,0,0,0,70,69,1,0,0,0,71,3,1,0,0,
		0,72,78,5,13,0,0,73,74,3,50,25,0,74,75,5,42,0,0,75,77,1,0,0,0,76,73,1,
		0,0,0,77,80,1,0,0,0,78,76,1,0,0,0,78,79,1,0,0,0,79,83,1,0,0,0,80,78,1,
		0,0,0,81,84,3,48,24,0,82,84,5,31,0,0,83,81,1,0,0,0,83,82,1,0,0,0,84,87,
		1,0,0,0,85,86,5,24,0,0,86,88,3,48,24,0,87,85,1,0,0,0,87,88,1,0,0,0,88,
		5,1,0,0,0,89,90,5,14,0,0,90,91,3,48,24,0,91,7,1,0,0,0,92,93,5,15,0,0,93,
		104,3,48,24,0,94,100,5,5,0,0,95,96,3,18,9,0,96,97,5,43,0,0,97,99,1,0,0,
		0,98,95,1,0,0,0,99,102,1,0,0,0,100,101,1,0,0,0,100,98,1,0,0,0,101,103,
		1,0,0,0,102,100,1,0,0,0,103,105,3,18,9,0,104,94,1,0,0,0,104,105,1,0,0,
		0,105,9,1,0,0,0,106,107,5,3,0,0,107,118,3,48,24,0,108,114,5,5,0,0,109,
		110,3,48,24,0,110,111,5,43,0,0,111,113,1,0,0,0,112,109,1,0,0,0,113,116,
		1,0,0,0,114,115,1,0,0,0,114,112,1,0,0,0,115,117,1,0,0,0,116,114,1,0,0,
		0,117,119,3,48,24,0,118,108,1,0,0,0,118,119,1,0,0,0,119,120,1,0,0,0,120,
		121,5,6,0,0,121,122,3,16,8,0,122,123,5,12,0,0,123,11,1,0,0,0,124,125,5,
		21,0,0,125,126,3,48,24,0,126,127,5,16,0,0,127,128,3,48,24,0,128,13,1,0,
		0,0,129,131,3,48,24,0,130,129,1,0,0,0,130,131,1,0,0,0,131,132,1,0,0,0,
		132,133,5,25,0,0,133,144,3,48,24,0,134,140,5,5,0,0,135,136,3,18,9,0,136,
		137,5,43,0,0,137,139,1,0,0,0,138,135,1,0,0,0,139,142,1,0,0,0,140,141,1,
		0,0,0,140,138,1,0,0,0,141,143,1,0,0,0,142,140,1,0,0,0,143,145,3,18,9,0,
		144,134,1,0,0,0,144,145,1,0,0,0,145,146,1,0,0,0,146,147,5,6,0,0,147,148,
		3,16,8,0,148,149,5,12,0,0,149,15,1,0,0,0,150,152,3,20,10,0,151,150,1,0,
		0,0,152,155,1,0,0,0,153,151,1,0,0,0,153,154,1,0,0,0,154,17,1,0,0,0,155,
		153,1,0,0,0,156,157,3,48,24,0,157,158,5,16,0,0,158,159,3,48,24,0,159,19,
		1,0,0,0,160,172,3,42,21,0,161,172,3,22,11,0,162,172,3,24,12,0,163,172,
		3,26,13,0,164,172,3,28,14,0,165,172,3,30,15,0,166,172,3,40,20,0,167,172,
		3,32,16,0,168,172,3,34,17,0,169,172,3,36,18,0,170,172,3,38,19,0,171,160,
		1,0,0,0,171,161,1,0,0,0,171,162,1,0,0,0,171,163,1,0,0,0,171,164,1,0,0,
		0,171,165,1,0,0,0,171,166,1,0,0,0,171,167,1,0,0,0,171,168,1,0,0,0,171,
		169,1,0,0,0,171,170,1,0,0,0,172,21,1,0,0,0,173,174,5,8,0,0,174,175,3,40,
		20,0,175,23,1,0,0,0,176,177,5,7,0,0,177,178,3,48,24,0,178,179,5,28,0,0,
		179,180,3,40,20,0,180,25,1,0,0,0,181,182,3,40,20,0,182,183,5,28,0,0,183,
		184,3,40,20,0,184,27,1,0,0,0,185,188,5,22,0,0,186,189,3,48,24,0,187,189,
		3,40,20,0,188,186,1,0,0,0,188,187,1,0,0,0,189,192,1,0,0,0,190,191,5,24,
		0,0,191,193,3,48,24,0,192,190,1,0,0,0,192,193,1,0,0,0,193,29,1,0,0,0,194,
		195,5,23,0,0,195,198,3,48,24,0,196,197,5,24,0,0,197,199,3,48,24,0,198,
		196,1,0,0,0,198,199,1,0,0,0,199,31,1,0,0,0,200,201,5,17,0,0,201,202,3,
		40,20,0,202,203,5,6,0,0,203,204,3,16,8,0,204,205,5,12,0,0,205,33,1,0,0,
		0,206,207,5,18,0,0,207,208,3,48,24,0,208,209,5,4,0,0,209,210,3,40,20,0,
		210,211,5,6,0,0,211,212,3,16,8,0,212,213,5,12,0,0,213,35,1,0,0,0,214,215,
		5,19,0,0,215,37,1,0,0,0,216,218,5,26,0,0,217,219,3,40,20,0,218,217,1,0,
		0,0,218,219,1,0,0,0,219,39,1,0,0,0,220,221,6,20,-1,0,221,233,3,42,21,0,
		222,233,3,44,22,0,223,233,3,46,23,0,224,233,3,52,26,0,225,233,3,48,24,
		0,226,227,5,44,0,0,227,228,3,40,20,0,228,229,5,45,0,0,229,233,1,0,0,0,
		230,231,7,0,0,0,231,233,3,40,20,4,232,220,1,0,0,0,232,222,1,0,0,0,232,
		223,1,0,0,0,232,224,1,0,0,0,232,225,1,0,0,0,232,226,1,0,0,0,232,230,1,
		0,0,0,233,245,1,0,0,0,234,235,10,3,0,0,235,236,7,1,0,0,236,244,3,40,20,
		4,237,238,10,2,0,0,238,239,7,2,0,0,239,244,3,40,20,3,240,241,10,1,0,0,
		241,242,7,3,0,0,242,244,3,40,20,2,243,234,1,0,0,0,243,237,1,0,0,0,243,
		240,1,0,0,0,244,247,1,0,0,0,245,243,1,0,0,0,245,246,1,0,0,0,246,41,1,0,
		0,0,247,245,1,0,0,0,248,249,5,9,0,0,249,250,3,40,20,0,250,251,5,10,0,0,
		251,260,3,16,8,0,252,253,5,11,0,0,253,254,5,9,0,0,254,255,3,40,20,0,255,
		256,5,10,0,0,256,257,3,16,8,0,257,259,1,0,0,0,258,252,1,0,0,0,259,262,
		1,0,0,0,260,258,1,0,0,0,260,261,1,0,0,0,261,267,1,0,0,0,262,260,1,0,0,
		0,263,264,5,11,0,0,264,266,3,16,8,0,265,263,1,0,0,0,266,269,1,0,0,0,267,
		265,1,0,0,0,267,268,1,0,0,0,268,270,1,0,0,0,269,267,1,0,0,0,270,271,5,
		12,0,0,271,43,1,0,0,0,272,273,3,48,24,0,273,274,5,27,0,0,274,275,3,40,
		20,0,275,45,1,0,0,0,276,277,3,48,24,0,277,287,5,44,0,0,278,279,3,40,20,
		0,279,280,5,43,0,0,280,282,1,0,0,0,281,278,1,0,0,0,282,285,1,0,0,0,283,
		284,1,0,0,0,283,281,1,0,0,0,284,286,1,0,0,0,285,283,1,0,0,0,286,288,3,
		40,20,0,287,283,1,0,0,0,287,288,1,0,0,0,288,289,1,0,0,0,289,290,5,45,0,
		0,290,47,1,0,0,0,291,292,5,54,0,0,292,49,1,0,0,0,293,297,3,48,24,0,294,
		295,5,48,0,0,295,297,5,48,0,0,296,293,1,0,0,0,296,294,1,0,0,0,297,51,1,
		0,0,0,298,305,5,49,0,0,299,305,5,51,0,0,300,305,5,52,0,0,301,305,5,53,
		0,0,302,305,5,50,0,0,303,305,3,54,27,0,304,298,1,0,0,0,304,299,1,0,0,0,
		304,300,1,0,0,0,304,301,1,0,0,0,304,302,1,0,0,0,304,303,1,0,0,0,305,53,
		1,0,0,0,306,317,5,46,0,0,307,308,3,40,20,0,308,309,5,43,0,0,309,311,1,
		0,0,0,310,307,1,0,0,0,311,314,1,0,0,0,312,313,1,0,0,0,312,310,1,0,0,0,
		313,315,1,0,0,0,314,312,1,0,0,0,315,318,3,40,20,0,316,318,3,48,24,0,317,
		312,1,0,0,0,317,316,1,0,0,0,318,319,1,0,0,0,319,320,5,47,0,0,320,55,1,
		0,0,0,29,59,70,78,83,87,100,104,114,118,130,140,144,153,171,188,192,198,
		218,232,243,245,260,267,283,287,296,304,312,317
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
